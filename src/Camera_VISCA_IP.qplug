-- Information block for the plugin
PluginInfo = {
  Name = "Cameras~Visca over IP",
  Description = "VISCA over IP",
  Version = "1.1.0.0",
  BuildVersion = "1.1.0.0",
  Id = "7c307beb-8afc-4029-9f5d-674baa4bd89d",
  Author = "Extrasolve, Isaac Porter",
} 

	--[[	
###############################################################################	
#	
# Copyright 2021 Richard Hills t/a Extrasolve             info@extrasolve.co.uk	
#	
# Based on plugin framework Copyright 2021 QSC, LLC.	
#	
#==============================================================================	
#	
# Permission is hereby granted, free of charge, to any person obtaining a copy	
# of this software and associated documentation files (the "Software"), to deal	
# in the Software without restriction, including without limitation the rights	
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell	
# copies of the Software, and to permit persons to whom the Software is	
# furnished to do so, subject to the following conditions:	
#	
# The above copyright notice and this permission notice shall be included in	
# all copies or substantial portions of the Software.	
#	
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR	
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,	
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE	
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER	
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,	
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE	
# SOFTWARE.	
# 	
###############################################################################	
]]

-- Resources
--Colour palette
Palette = {
	es_green  = {162, 192, 55},
	es_blue   = {46, 63, 87},
	White     = {255, 255, 255},
	Black     = {0, 0, 0},
	Red       = {255, 0, 0},
	Green     = {0, 255, 0}
}

-- Logos
Icon_Arrow_UpRt = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjwhRE9DVFlQRSBzdmcgUFVCTElDICItLy9XM0MvL0RURCBTVkcgMS4xLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL0dyYXBoaWNzL1NWRy8xLjEvRFREL3N2ZzExLmR0ZCI+Cjxzdmcgd2lkdGg9IjEwMCUiIGhlaWdodD0iMTAwJSIgdmlld0JveD0iMCAwIDI1NiAyNTYiIHZlcnNpb249IjEuMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeG1sOnNwYWNlPSJwcmVzZXJ2ZSIgeG1sbnM6c2VyaWY9Imh0dHA6Ly93d3cuc2VyaWYuY29tLyIgc3R5bGU9ImZpbGwtcnVsZTpldmVub2RkO2NsaXAtcnVsZTpldmVub2RkO3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDoyOyI+CiAgICA8ZyB0cmFuc2Zvcm09Im1hdHJpeCgwLjE2MTU3MSwwLjE2MTMzOCwtMC4xNjEzMzgsMC4xNjE1NzEsMTQ1LjU1OSwtMy4zMTY3NSkiPgogICAgICAgIDxwYXRoIGQ9Ik0zNDAuNCwzMy42QzMzOC4yLDM0LjQgMzM0LjUsMzYuOSAzMzIuMywzOS4zQzMyOC40LDQzLjMgMzYuMiw0NTMuNSAzMy40LDQ1OC45QzMyLjYsNDYwLjMgMzIsNDY0LjQgMzIsNDY3LjlDMzIsNDc4LjkgMzguNiw0ODkuNiA0OCw0OTMuOUM1MS4xLDQ5NS4zIDYwLjQsNDk1LjYgMTI0LDQ5NkwxOTYuNSw0OTYuNUwxOTcuMSw1NTQuNUMxOTcuNCw1ODYuNCAxOTcuOCw2NzAuNSAxOTcuOSw3NDEuNUMxOTgsODMyLjMgMTk4LjMsODcxLjcgMTk5LjEsODc0LjVDMjAwLjYsODgwIDIwOC4yLDg4Ny40IDIxNCw4ODkuMUMyMTcuNyw4OTAuMyAyNDIuOCw4OTAuNSAzNTMuNSw4OTAuNUw0ODguNSw4OTAuNUw0OTMuMSw4ODguNEM0OTcuOCw4ODYuMiA1MDEuOCw4ODEuOSA1MDQuMiw4NzYuNUM1MDUuMyw4NzQuMSA1MDUuNiw4MzggNTA2LDY4NUw1MDYuNSw0OTYuNUw2NTIuNSw0OTUuNUw2NTYuNyw0OTMuM0M2NjguNSw0ODYuOSA2NzUuMyw0NjkuNiA2NzAuMiw0NTguOUM2NjcsNDUyLjIgMzc1LjksNDMuNiAzNzEsMzguOUMzNjcuNywzNS44IDM2NC43LDMzLjkgMzYxLjYsMzMuMUMzNTUuNiwzMS42IDM0NS40LDMxLjggMzQwLjQsMzMuNloiIHN0eWxlPSJmaWxsOndoaXRlOyIvPgogICAgPC9nPgo8L3N2Zz4K"

Icon_Arrow_DnRt = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjwhRE9DVFlQRSBzdmcgUFVCTElDICItLy9XM0MvL0RURCBTVkcgMS4xLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL0dyYXBoaWNzL1NWRy8xLjEvRFREL3N2ZzExLmR0ZCI+Cjxzdmcgd2lkdGg9IjEwMCUiIGhlaWdodD0iMTAwJSIgdmlld0JveD0iMCAwIDI1NiAyNTYiIHZlcnNpb249IjEuMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeG1sOnNwYWNlPSJwcmVzZXJ2ZSIgeG1sbnM6c2VyaWY9Imh0dHA6Ly93d3cuc2VyaWYuY29tLyIgc3R5bGU9ImZpbGwtcnVsZTpldmVub2RkO2NsaXAtcnVsZTpldmVub2RkO3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDoyOyI+CiAgICA8ZyB0cmFuc2Zvcm09Im1hdHJpeCgtMC4xNjEzMzgsMC4xNjE1NzEsLTAuMTYxNTcxLC0wLjE2MTMzOCwyNTkuMzYyLDE2Ni4yMDYpIj4KICAgICAgICA8cGF0aCBkPSJNMzQwLjQsMzMuNkMzMzguMiwzNC40IDMzNC41LDM2LjkgMzMyLjMsMzkuM0MzMjguNCw0My4zIDM2LjIsNDUzLjUgMzMuNCw0NTguOUMzMi42LDQ2MC4zIDMyLDQ2NC40IDMyLDQ2Ny45QzMyLDQ3OC45IDM4LjYsNDg5LjYgNDgsNDkzLjlDNTEuMSw0OTUuMyA2MC40LDQ5NS42IDEyNCw0OTZMMTk2LjUsNDk2LjVMMTk3LjEsNTU0LjVDMTk3LjQsNTg2LjQgMTk3LjgsNjcwLjUgMTk3LjksNzQxLjVDMTk4LDgzMi4zIDE5OC4zLDg3MS43IDE5OS4xLDg3NC41QzIwMC42LDg4MCAyMDguMiw4ODcuNCAyMTQsODg5LjFDMjE3LjcsODkwLjMgMjQyLjgsODkwLjUgMzUzLjUsODkwLjVMNDg4LjUsODkwLjVMNDkzLjEsODg4LjRDNDk3LjgsODg2LjIgNTAxLjgsODgxLjkgNTA0LjIsODc2LjVDNTA1LjMsODc0LjEgNTA1LjYsODM4IDUwNiw2ODVMNTA2LjUsNDk2LjVMNjUyLjUsNDk1LjVMNjU2LjcsNDkzLjNDNjY4LjUsNDg2LjkgNjc1LjMsNDY5LjYgNjcwLjIsNDU4LjlDNjY3LDQ1Mi4yIDM3NS45LDQzLjYgMzcxLDM4LjlDMzY3LjcsMzUuOCAzNjQuNywzMy45IDM2MS42LDMzLjFDMzU1LjYsMzEuNiAzNDUuNCwzMS44IDM0MC40LDMzLjZaIiBzdHlsZT0iZmlsbDp3aGl0ZTsiLz4KICAgIDwvZz4KPC9zdmc+Cg=="

Icon_Arrow_DnLt = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjwhRE9DVFlQRSBzdmcgUFVCTElDICItLy9XM0MvL0RURCBTVkcgMS4xLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL0dyYXBoaWNzL1NWRy8xLjEvRFREL3N2ZzExLmR0ZCI+Cjxzdmcgd2lkdGg9IjEwMCUiIGhlaWdodD0iMTAwJSIgdmlld0JveD0iMCAwIDI1NiAyNTYiIHZlcnNpb249IjEuMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeG1sOnNwYWNlPSJwcmVzZXJ2ZSIgeG1sbnM6c2VyaWY9Imh0dHA6Ly93d3cuc2VyaWYuY29tLyIgc3R5bGU9ImZpbGwtcnVsZTpldmVub2RkO2NsaXAtcnVsZTpldmVub2RkO3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDoyOyI+CiAgICA8ZyB0cmFuc2Zvcm09Im1hdHJpeCgtMC4xNjE1NzEsLTAuMTYxMzM4LDAuMTYxMzM4LC0wLjE2MTU3MSw4OS44MzkzLDI4MC4wMDgpIj4KICAgICAgICA8cGF0aCBkPSJNMzQwLjQsMzMuNkMzMzguMiwzNC40IDMzNC41LDM2LjkgMzMyLjMsMzkuM0MzMjguNCw0My4zIDM2LjIsNDUzLjUgMzMuNCw0NTguOUMzMi42LDQ2MC4zIDMyLDQ2NC40IDMyLDQ2Ny45QzMyLDQ3OC45IDM4LjYsNDg5LjYgNDgsNDkzLjlDNTEuMSw0OTUuMyA2MC40LDQ5NS42IDEyNCw0OTZMMTk2LjUsNDk2LjVMMTk3LjEsNTU0LjVDMTk3LjQsNTg2LjQgMTk3LjgsNjcwLjUgMTk3LjksNzQxLjVDMTk4LDgzMi4zIDE5OC4zLDg3MS43IDE5OS4xLDg3NC41QzIwMC42LDg4MCAyMDguMiw4ODcuNCAyMTQsODg5LjFDMjE3LjcsODkwLjMgMjQyLjgsODkwLjUgMzUzLjUsODkwLjVMNDg4LjUsODkwLjVMNDkzLjEsODg4LjRDNDk3LjgsODg2LjIgNTAxLjgsODgxLjkgNTA0LjIsODc2LjVDNTA1LjMsODc0LjEgNTA1LjYsODM4IDUwNiw2ODVMNTA2LjUsNDk2LjVMNjUyLjUsNDk1LjVMNjU2LjcsNDkzLjNDNjY4LjUsNDg2LjkgNjc1LjMsNDY5LjYgNjcwLjIsNDU4LjlDNjY3LDQ1Mi4yIDM3NS45LDQzLjYgMzcxLDM4LjlDMzY3LjcsMzUuOCAzNjQuNywzMy45IDM2MS42LDMzLjFDMzU1LjYsMzEuNiAzNDUuNCwzMS44IDM0MC40LDMzLjZaIiBzdHlsZT0iZmlsbDp3aGl0ZTsiLz4KICAgIDwvZz4KPC9zdmc+Cg=="

Icon_Arrow_UpLt = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjwhRE9DVFlQRSBzdmcgUFVCTElDICItLy9XM0MvL0RURCBTVkcgMS4xLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL0dyYXBoaWNzL1NWRy8xLjEvRFREL3N2ZzExLmR0ZCI+Cjxzdmcgd2lkdGg9IjEwMCUiIGhlaWdodD0iMTAwJSIgdmlld0JveD0iMCAwIDI1NiAyNTYiIHZlcnNpb249IjEuMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeG1sOnNwYWNlPSJwcmVzZXJ2ZSIgeG1sbnM6c2VyaWY9Imh0dHA6Ly93d3cuc2VyaWYuY29tLyIgc3R5bGU9ImZpbGwtcnVsZTpldmVub2RkO2NsaXAtcnVsZTpldmVub2RkO3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDoyOyI+CiAgICA8ZyB0cmFuc2Zvcm09Im1hdHJpeCgwLjE2MTMzOCwtMC4xNjE1NzEsMC4xNjE1NzEsMC4xNjEzMzgsLTIzLjk2MzIsMTEwLjQ4NikiPgogICAgICAgIDxwYXRoIGQ9Ik0zNDAuNCwzMy42QzMzOC4yLDM0LjQgMzM0LjUsMzYuOSAzMzIuMywzOS4zQzMyOC40LDQzLjMgMzYuMiw0NTMuNSAzMy40LDQ1OC45QzMyLjYsNDYwLjMgMzIsNDY0LjQgMzIsNDY3LjlDMzIsNDc4LjkgMzguNiw0ODkuNiA0OCw0OTMuOUM1MS4xLDQ5NS4zIDYwLjQsNDk1LjYgMTI0LDQ5NkwxOTYuNSw0OTYuNUwxOTcuMSw1NTQuNUMxOTcuNCw1ODYuNCAxOTcuOCw2NzAuNSAxOTcuOSw3NDEuNUMxOTgsODMyLjMgMTk4LjMsODcxLjcgMTk5LjEsODc0LjVDMjAwLjYsODgwIDIwOC4yLDg4Ny40IDIxNCw4ODkuMUMyMTcuNyw4OTAuMyAyNDIuOCw4OTAuNSAzNTMuNSw4OTAuNUw0ODguNSw4OTAuNUw0OTMuMSw4ODguNEM0OTcuOCw4ODYuMiA1MDEuOCw4ODEuOSA1MDQuMiw4NzYuNUM1MDUuMyw4NzQuMSA1MDUuNiw4MzggNTA2LDY4NUw1MDYuNSw0OTYuNUw2NTIuNSw0OTUuNUw2NTYuNyw0OTMuM0M2NjguNSw0ODYuOSA2NzUuMyw0NjkuNiA2NzAuMiw0NTguOUM2NjcsNDUyLjIgMzc1LjksNDMuNiAzNzEsMzguOUMzNjcuNywzNS44IDM2NC43LDMzLjkgMzYxLjYsMzMuMUMzNTUuNiwzMS42IDM0NS40LDMxLjggMzQwLjQsMzMuNloiIHN0eWxlPSJmaWxsOndoaXRlOyIvPgogICAgPC9nPgo8L3N2Zz4K"

-- Define the color of the plugin object in the design
function GetColor(props)
  return Palette.es_blue
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return PluginInfo.Description .. " v" .. PluginInfo.Version --string.match(PluginInfo.BuildVersion, "([0-9]+.[0-9]+)") 
end

-- Optional function used if plugin has multiple pages
PageNames = { "Main" }  --List the pages within the plugin  { "Page1", "Page2" }
function GetPages(props)
  local pages = {}
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Optional function to define model if plugin supports more than one model
function GetModel(props)
  local model = {}
  if props.Model ~= nil and props.Model.Value ~= "" then
    table.insert(model, { props.Model.Value } )
  else
    table.insert(model, { "Base Model" } )
  end
 return model
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  table.insert(props, {
    Name = "Num Presets",
    Type = "integer",
    Value = 8,
    Min = 0,
    Max = 128
  })
  table.insert(props, {
    Name = "Preset Hold Save",
    Type = "boolean",
    Value = false
  })
  table.insert(props, {
    Name = "Preset Hold Time",
    Type = "double",
    Value = 2,
    Min = 0.5,
    Max = 5.0
  })
  table.insert(props, {
    Name = "Debug Print",
    Type = "enum",
    Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
    Value = "None"
  })
  
  
  return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
  local pins = {}
  --[[
    table.insert(pins,{
    Name = "Audio Output",
    Direction = "output",
  })
  ]]
  return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then 
    props["Debug Print"].IsHidden = true 
  end
  
  if props["Preset Hold Save"].Value == false then 
    props["Preset Hold Time"].IsHidden = true 
  end
  return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
  local components = {}
  -- Optional function to define components used within the plugin
  function GetComponents(props)
    local components = {}
    --[[
    table.insert(components,{
      Name = "main_mixer",
      Type = "mixer",
      Properties =   
      {
        ["n_inputs"] = 8,
        ["n_outputs"] = 1,
      }
    })
    ]]
    return components
  end
  return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
  local wiring = {}
  --table.insert( wiring, { "Audio Output", "main_mixer Output 1" } )
  return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  local NumPresets =  props["Num Presets"].Value
  
  -- Connection ---------------------------------------------------------------
  table.insert(ctrls, {
    Name = "system.online",
    ControlType = "Indicator",
    IndicatorType = "Led",
    DefaultValue = false,
    PinStyle = "Output",
    Count = 1,
    UserPin = true
  })
  
  table.insert(ctrls, {
    Name = "system.ip.address",
    ControlType = "Text",
    DefaultValue = "127.0.0.1",
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  table.insert(ctrls, {
    Name = "system.ip.port",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Min = 1,
    Max = 65535,
    DefaultValue = 1258,
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  
  -- PTZ ----------------------------------------------------------------------
  table.insert(ctrls, {
    Name = "setup.pan.speed",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Min = 1,
    Max = 24,
    DefaultValue = 12,
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  table.insert(ctrls, {
    Name = "setup.tilt.speed",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Min = 1,
    Max = 20,
    DefaultValue = 10,
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  table.insert(ctrls, {
    Name = "setup.zoom.speed",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Min = 0,
    Max = 7,
    DefaultValue = 3,
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  
  table.insert(ctrls, {
    Name = "preset.home.load",
    ControlType = "Button",
    ButtonType = "Momentary",
    Count = 1,
    UserPin = true,
    PinStyle = "Input",
    Icon = "Home"
  })
  
  table.insert(ctrls, {
    Name = "tilt.up",
    ControlType = "Button",
    ButtonType = "Momentary",
    Count = 1,
    UserPin = true,
    PinStyle = "Input",
    Icon = "Arrow Up"
  })
  
  table.insert(ctrls, {
    Name = "tilt.down",
    ControlType = "Button",
    ButtonType = "Momentary",
    Count = 1,
    UserPin = true,
    PinStyle = "Input",
    Icon = "Arrow Down"
  })
  
  table.insert(ctrls, {
    Name = "pan.left",
    ControlType = "Button",
    ButtonType = "Momentary",
    Count = 1,
    UserPin = true,
    PinStyle = "Input",
    Icon = "Arrow Left"
  })
  
  table.insert(ctrls, {
    Name = "pan.right",
    ControlType = "Button",
    ButtonType = "Momentary",
    Count = 1,
    UserPin = true,
    PinStyle = "Input",
    Icon = "Arrow Right"
  })
  
  table.insert(ctrls, {
    Name = "pan.right.tilt.up",
    ControlType = "Button",
    ButtonType = "Momentary",
    Count = 1,
    UserPin = true,
    PinStyle = "Input",
    IconType = "SVG",
    Icon = Icon_Arrow_UpRt
    --Icon = "File C:\Users\rehil\Dropbox\#DATA\QSC\Plugins\VISCA_IP\graphics\Arrow UpRight.svg does not exist"
  })
  
  table.insert(ctrls, {
    Name = "pan.right.tilt.down",
    ControlType = "Button",
    ButtonType = "Momentary",
    Count = 1,
    UserPin = true,
    PinStyle = "Input",
    IconType = "SVG",
    Icon = Icon_Arrow_DnRt
    --Icon = "File C:\Users\rehil\Dropbox\#DATA\QSC\Plugins\VISCA_IP\graphics\Arrow DownRight.svg does not exist"
  })
  
  table.insert(ctrls, {
    Name = "pan.left.tilt.down",
    ControlType = "Button",
    ButtonType = "Momentary",
    Count = 1,
    UserPin = true,
    PinStyle = "Input",
    IconType = "SVG",
    Icon = Icon_Arrow_DnLt
    --Icon = "File C:\Users\rehil\Dropbox\#DATA\QSC\Plugins\VISCA_IP\graphics\Arrow DownLeft.svg does not exist"
  })
  
  table.insert(ctrls, {
    Name = "pan.left.tilt.up",
    ControlType = "Button",
    ButtonType = "Momentary",
    Count = 1,
    UserPin = true,
    PinStyle = "Input",
    IconType = "SVG",
    Icon = Icon_Arrow_UpLt
    --Icon = "File C:\Users\rehil\Dropbox\#DATA\QSC\Plugins\VISCA_IP\graphics\Arrow UpLeft.svg does not exist"
  })
  
  table.insert(ctrls, {
    Name = "zoom.in",
    ControlType = "Button",
    ButtonType = "Momentary",
    Count = 1,
    UserPin = true,
    PinStyle = "Input",
    Icon = "Zoom In"
  })
  
  table.insert(ctrls, {
    Name = "zoom.out",
    ControlType = "Button",
    ButtonType = "Momentary",
    Count = 1,
    UserPin = true,
    PinStyle = "Input",
    Icon = "Zoom Out"
  })
  
  -- Presets ------------------------------------------------------------------
  table.insert(ctrls, {
    Name = "preset.saved",
    ControlType = "Indicator",
    IndicatorType = "Led",
    DefaultValue = false,
    PinStyle = "Output",
    Count = 1,
    UserPin = true
  })
  
  for pst = 0, NumPresets - 1 do
    table.insert(ctrls, {
      Name = "preset.recall." .. string.format("%03d",pst),
      ControlType = "Button",
      ButtonType = "Momentary",
      Count = 1,
      UserPin = true,
      PinStyle = "Input",
      Icon = ""
    })
    table.insert(ctrls, {
      Name = "preset.save." .. string.format("%03d",pst),
      ControlType = "Button",
      ButtonType = "Momentary",
      Count = 1,
      UserPin = true,
      PinStyle = "Input",
      Icon = ""
    })
  end
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  local CurrentPage = PageNames[props["page_index"].Value]
  
  local h1 = 20                 --Height of text elements
  local h2 = 32                 --Height of control buttons
  local w1 = 280                --Width of group boxes
  local fs1 = 12                --FontSize of text elements
  
  --Calculate preset gropup box size and save button offset
  local NumPresets = props["Num Presets"].Value
  local NumPresetRows = math.floor((NumPresets - 1) / 8) + 1
  
  local PresetGroupHeight = 24 + (NumPresetRows * h2)
  if props["Preset Hold Save"].Value == false then
    PresetGroupHeight = PresetGroupHeight + (NumPresetRows * h2) + 8
  end
  
  local PresetSaveOffset = (h2 * NumPresetRows) + 8
  
  
  
  if CurrentPage == "Main" then
  
    -- Logo -------------------------------------------------------------------
    table.insert(graphics,{
      Type = "Text",
      Text = "Build Info",
      FontSize = fs1,
      HTextAlign = "Left",
      Position = {0, 0},
      Size = {62, h1}
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "v" .. PluginInfo.BuildVersion,
      FontSize = fs1,
      HTextAlign = "Left",
      Position = {0, h1},
      Size = {62, h1}
    })
    
    -- Group boxes ------------------------------------------------------------
    table.insert(graphics,{
      Type = "GroupBox",
      Text = "Connection",
      FontSize = fs1,
      HTextAlign = "Left",
      Fill = Palette.White,
      StrokeColor = Palette.Black,
      StrokeWidth = 1,
      CornerRadius = 8,
      Position = {0, 50},
      Size = {w1, 52}
    })
    table.insert(graphics,{
      Type = "GroupBox",
      Text = "PTZ",
      FontSize = fs1,
      HTextAlign = "Left",
      Fill = Palette.White,
      StrokeColor = Palette.Black,
      StrokeWidth = 1,
      CornerRadius = 8,
      Position = {0, 114},
      Size = {w1, 104}
    })
  
    if NumPresets > 0 then
      table.insert(graphics,{
        Type = "GroupBox",
        Text = "Presets",
        FontSize = fs1,
        HTextAlign = "Left",
        Fill = Palette.White,
        StrokeColor = Palette.Black,
        StrokeWidth = 1,
        CornerRadius = 8,
        Position = {0, 226},
        Size = {w1, PresetGroupHeight}
      })
    end
  
    -- Connection -------------------------------------------------------------
    layout["system.online"] = {
      PrettyName = "System~Online",
      Style = "Indicator",
      Color = {0, 255, 0},
      OffColor = {64, 0, 0},
      UnlinkOffColor = true,
      StrokeWidth = 1,
      Margin = 4,
      Position = {75, 50},
      Size = {h1, h1}
    }
  
    table.insert(graphics,{
      Type = "Text",
      Text = "IP Address",
      FontSize = fs1,
      HTextAlign = "Right",
      Position = {15, 74},
      Size = {62, h1}
    })
    layout["system.ip.address"] = {
      PrettyName = "System~IP Address",
      Style = "Text",
      FontSize = fs1,
      HTextAlign = "Center",
      Padding = 2,
      StrokeWidth = 1,
      Position = {79,74},
      Size = {100, h1}
    }
    
    table.insert(graphics,{
      Type = "Text",
      Text = "Port",
      FontSize = fs1,
      HTextAlign = "Right",
      Position = {184, 74},
      Size = {33, h1}
    })
    layout["system.ip.port"] = {
      PrettyName = "System~IP Port",
      Style = "Text",
      Color = Palette.White,
      OffColor = Palette.White,
      UnlinkOffColor = true,
      FontSize = fs1,
      HTextAlign = "Center",
      Padding = 2,
      StrokeWidth = 1,
      Position = {219, 74},
      Size = {44, h1}
    }
  
    -- PTZ --------------------------------------------------------------------
    table.insert(graphics,{
      Type = "Text",
      Text = "Speed",
      FontSize = fs1,
      HTextAlign = "Center",
      Position = {34, 137},
      Size = {47, 20}
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "P\nT\nZ",
      FontSize = 15,
      HTextAlign = "Center",
      Position = {17, 153},
      Size = {17, 54}
    })
    layout["setup.pan.speed"] = {
      PrettyName = "Pan-Tilt-Zoom~Pan Speed",
      Style = "Text",
      FontSize = fs1,
      HTextAlign = "Center",
      Padding = 2,
      StrokeWidth = 1,
      Position = {37, 155},
      Size = {44, 18}
    }
    layout["setup.tilt.speed"] = {
      PrettyName = "Pan-Tilt-Zoom~Tilt Speed",
      Style = "Text",
      FontSize = fs1,
      HTextAlign = "Center",
      Padding = 2,
      StrokeWidth = 1,
      Position = {37, 173},
      Size = {44, 18}
    }
    layout["setup.zoom.speed"] = {
      PrettyName = "Pan-Tilt-Zoom~Zoom Speed",
      Style = "Text",
      FontSize = fs1,
      HTextAlign = "Center",
      Padding = 2,
      StrokeWidth = 1,
      Position = {37, 191},
      Size = {44, 18}
    }
  
    layout["preset.home.load"] = {
      PrettyName = "Pan-Tilt-Zoom~Home",
      Legend = "",
      Style = "Button",
      Color = Palette.es_blue,
      Margin = 4,
      Position = {139, 150},
      Size = {h2, h2},
    }    
    layout["tilt.up"] = {
      PrettyName = "Pan-Tilt-Zoom~Tilt Up",
      Legend = "",
      Style = "Button",
      Color = Palette.es_blue,
      Margin = 4,
      Position = {139, 118},
      Size = {h2, h2},
    }    
    layout["tilt.down"] = {
      PrettyName = "Pan-Tilt-Zoom~Tilt Down",
      Legend = "",
      Style = "Button",
      Color = Palette.es_blue,
      Margin = 4,
      Position = {139, 182},
      Size = {h2, h2},
    }    
    layout["pan.left"] = {
      PrettyName = "Pan-Tilt-Zoom~Pan Left",
      Legend = "",
      Style = "Button",
      Color = Palette.es_blue,
      Margin = 4,
      Position = {107, 150},
      Size = {h2, h2},
    }    
    layout["pan.right"] = {
      PrettyName = "Pan-Tilt-Zoom~Pan Right",
      Legend = "",
      Style = "Button",
      Color = Palette.es_blue,
      Margin = 4,
      Position = {171, 150},
      Size = {h2, h2},
    }    
    layout["pan.right.tilt.up"] = {
      PrettyName = "Pan-Tilt-Zoom~Pan Right / Tilt Up",
      Legend = "",
      Style = "Button",
      Color = Palette.es_blue,
      Margin = 4,
      Position = {171, 118},
      Size = {h2, h2},
    }    
    layout["pan.right.tilt.down"] = {
      PrettyName = "Pan-Tilt-Zoom~Pan Right / Tilt Down",
      Legend = "",
      Style = "Button",
      Color = Palette.es_blue,
      Margin = 4,
      Position = {171, 182},
      Size = {h2, h2},
    }    
    layout["pan.left.tilt.down"] = {
      PrettyName = "Pan-Tilt-Zoom~Pan Left / Tilt Down",
      Legend = "",
      Style = "Button",
      Color = Palette.es_blue,
      Margin = 4,
      Position = {107, 182},
      Size = {h2, h2},
    }    
    layout["pan.left.tilt.up"] = {
      PrettyName = "Pan-Tilt-Zoom~Pan Left / Tilt Up",
      Legend = "",
      Style = "Button",
      Color = Palette.es_blue,
      Margin = 4,
      Position = {107, 118},
      Size = {h2, h2},
    }
    layout["zoom.in"] = {
      PrettyName = "Pan-Tilt-Zoom~Zoom In",
      Legend = "",
      Style = "Button",
      Color = Palette.es_blue,
      Margin = 4,
      Position = {235, 133},
      Size = {h2, h2},
    }    
    layout["zoom.out"] = {
      PrettyName = "Pan-Tilt-Zoom~Zoom Out",
      Legend = "",
      Style = "Button",
      Color = Palette.es_blue,
      Margin = 4,
      Position = {235, 165},
      Size = {h2, h2},
    }    
  
    -- Presets ----------------------------------------------------------------
    
    layout["PresetSaved"] = {
    PrettyName = "Preset~Preset Saved",
    Style = "Indicator",
    Color = {255, 0, 0},
    OffColor = {16, 0, 0},
    UnlinkOffColor = true,
    StrokeWidth = 1,
    Margin = 4,
    Position = {55, 225},
    Size = {h1, h1}
    }
  
    for pst = 0, NumPresets - 1 do
      local row = 1 + math.floor(pst / 8)
      local col = 1 + (pst % 8)
  
      layout["preset.recall." .. string.format("%03d",pst)] = {
        PrettyName = "Preset~Recall P" .. string.format("%03d", pst),
        Style = "Button",
        Margin = 4,
        Color = Palette.Green,
        Legend = "P" .. (pst),
        Position = {11 + (h2 * (col - 1)),
                    246 + (h2 * (row - 1))},
        Size = {h2, h2}
      }
  
      if props["Preset Hold Save"].Value == false then
        layout["preset.save." .. string.format("%03d",pst)] = {
          PrettyName = "Preset~Save P" .. string.format("%03d", pst),
          Style = "Button",
          Margin = 4,
          Color = Palette.Red,
          Legend = "P" .. (pst),
          Position = {11 + (h2 * (col - 1)),
                      246 + PresetSaveOffset + (h2 * (row - 1))},
          Size = {h2, h2}
        }
      end
    end
  
  end
  return layout, graphics
end

--Start event based logic
if Controls then
    --vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv UDP vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
  
    -- Sockets
    UDP = UdpSocket.New()  -- Create new UdpSocket object
    UDPSocketOpen = false
  
    IPAddressCtl = Controls["system.ip.address"]
    IPPortCtl = Controls["system.ip.port"]
  
    -- Map the UDP example properties to plugin properies
    IPAddress = IPAddressCtl.String
    Port = IPPortCtl.Value
    LocalIPAddress = nil    --Auto select
    LocalPort = nil         --Auto select
    LocalNICName = nil      --Auto select
    --MulticastAddress = "224.0.23.175"
  
    PollInteval = 10
  
  
    -- If a NIC is specified by name, bind LocalIPAddress to it
    function SelectNIC()
      if DebugFunction then print("SelectNIC() Called") end
      if LocalNICName ~= nil then
        -- Detect the local IP address selected LAN
        local nics = Network.Interfaces()
        for i,nic in ipairs(nics) do
          if nic.Interface == LocalNICName then
            LocalIPAddress = nic.Address
          end
        end
      end
    end
    
    -- When the UDP Socket is created run these setup functions
    function Connected()
      if DebugFunction then print("Connected() Called") end
      print("UDP Socket Opened")
      UDPSocketOpen = true
      
      -- Start any initial data requests or polling loops here
      CommsPoll()
    end
    
    -- Wrapper for safely binding local address
    function OpenPorts(ip, port)
      if DebugFunction then print("OpenPorts() Called: " .. ip .. ":" .. port) end
      UDP:Open(ip, port)
    end
    
    -- Opens a local UDP socket for use
    function OpenSocket()
      if DebugFunction then print("OpenSocket() Called") end  
      -- If a local address has been chosen, open a UDP socket for use
      if LocalIPAddress ~= nil then
        print("Opening: " .. LocalIPAddress .. ":" .. LocalPort)
        -- pcall will prevent down interfaces from causing script errors
        local portGood, err = pcall(OpenPorts, LocalIPAddress, LocalPort)
        if not portGood then
          print("Error opening UDP Socket: " .. err)
        else
          Connected()
        end
    
      -- Let the core choose the address and port of the UDP socket automatically
      else
        OpenPorts(nil,nil)
        Connected()
      end
    end
    
    -- Join the open UDPSocket to a multicast network
    -- Datagrams on the address
    function JoinMulticast(address)
      if DebugFunction then print("JoinMulticast() Called: " .. address) end
      if UDPSocketOpen then
        UDP:JoinMulticast(address)
      else
        print("Error joining multicast network: Local Socket Closed")
      end
    end
    
    -- Use the open UDPSocket to send a UDP datagram of the string (command) to the IPAddress and Port defined
    function Send(command)
      if DebugFunction then print("Send() Called") end
      if UDPSocketOpen then
        if DebugTx then print("Sending " .. IPAddress .. ":" .. Port .. " datagram: " .. command) end
        UDP:Send(IPAddress, Port, command)  -- Write command to the UDP socket
      else
        --If the socket is closed, open it and try again
        OpenSocket()
        Send(command)
      end
    end
    
    -- Handle cleanup when closing the UDP port
    function Close()
      if DebugFunction then print("Close() Called") end
      UDP:Close()
      UDPSocketOpen=false
      Controls["system.online"].Boolean = false
  
      -- Stop any timers and clear data here
      CommsPollTimer:Stop()
    end
    
    -- Parsers
    -- UDP Data event is called when data is received on the port, either targeted at the local address or from a multicast network.
    UDP.Data = function(socket, packet)
      if DebugFunction then print("UDP Data Eventhandler Called") end
      if DebugRx then print("Address: " .. packet.Address, "Port: " .. packet.Port, "Rx: " .. packet.Data)  end
      
      -- Handle response data here
      if string.sub(packet.Data, 1, 2) == "\x01\x11" then --Valid visca reply
        Controls["system.online"].Boolean = true
        CommsTimeoutTimer:Start(PollInteval * 2.5)
      end
    end
    
    --Setup the UDP sockets to be used 
    function UDP_Initialize()
      if DebugFunction then print("Initialize() Called") end
  
      Controls["system.online"].Boolean = false
      
      IPAddress = IPAddressCtl.String
      Port = IPPortCtl.Value
  
      if UDPSocketOpen == true then
        Close()
      end
  
      if IPAddress.String ~= "" then
        SelectNIC()                       -- Choose the correct NIC for communication
        OpenSocket()                      -- Create the local UDP Socket for use
        --JoinMulticast(MulticastAddress) -- Join the specified multicast 
      end
    end
  
  
    IPAddressCtl.EventHandler = UDP_Initialize
    IPPortCtl.EventHandler = UDP_Initialize
    
    --^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  
    --Controls["IPAddress"].String = Controls.IPAddress
    --Controls["IPPort"].String = Controls.IPPort
  
    local MsgSeqIndex = 0
    local PresetHold = nil
    local NumPresets = Properties["Num Presets"].Value
    local PresetHoldTime = Properties["Preset Hold Time"].Value
    
    local PanSpeed = Controls["setup.pan.speed"].Value
    local TiltSpeed = Controls["setup.tilt.speed"].Value
    local ZoomSpeed = Controls["setup.zoom.speed"].Value
  
    function HexToString(num, len)
      --Returns num as string of len * hex bytes
      local val = num
      local ret = ""
      for i = 1, len do
        ret = string.char(val & 0xff) .. ret
        val = math.floor(val / 0x100)
      end
      return ret
    end
  
    function  VISCA(typ, msg)	
      --print("PTZ_Control(" .. typ .. ", " .. msg .. ")")	
      if UDPSocketOpen == true then	
  	
        CommsPollTimer:Start(PollInteval)	
  	
        --Calculate message type for header	
        local msgType = string.char(0x01,0x00)	
        if string.sub(typ, 1, 3) == "Inq" then	
          msgType = string.char(0x01,0x10)	
        end	
  	
        --Calculate message length for header	
        local msgLen = HexToString(#msg, 2)	
  	
        --Calculate sequence number header	
        if MsgSeqIndex < 0xFFFFFFFF then	
          MsgSeqIndex = MsgSeqIndex + 1	
        else	
          MsgSeqIndex = 0	
        end	
        local msgSeq = HexToString(MsgSeqIndex, 4)	
  	
        --Build and send message	
        local viscaMsg = msgType .. msgLen .. msgSeq .. msg	
        Send(viscaMsg)	
      end	
    end	
  
  
    function PTZ_Control(func)
      print(func)
  
      local PS = PanSpeed
      local TS = TiltSpeed
  
      if     func == "preset.home.load" then  VISCA("Cmd", string.char(0x81,0x01,0x06,0x04,0xff))
  
      elseif func == "tilt.up"   then  VISCA("Cmd", string.char(0x81,0x01,0x06,0x01,PS,TS,0x03,0x01,0xff))
      elseif func == "tilt.down"   then  VISCA("Cmd", string.char(0x81,0x01,0x06,0x01,PS,TS,0x03,0x02,0xff))
      elseif func == "pan.left"   then  VISCA("Cmd", string.char(0x81,0x01,0x06,0x01,PS,TS,0x01,0x03,0xff))
      elseif func == "pan.right"   then  VISCA("Cmd", string.char(0x81,0x01,0x06,0x01,PS,TS,0x02,0x03,0xff))
  
      elseif func == "pan.right.tilt.up"   then  VISCA("Cmd", string.char(0x81,0x01,0x06,0x01,PS,TS,0x02,0x01,0xff))
      elseif func == "pan.right.tilt.down"   then  VISCA("Cmd", string.char(0x81,0x01,0x06,0x01,PS,TS,0x02,0x02,0xff))
      elseif func == "pan.left.tilt.down"   then  VISCA("Cmd", string.char(0x81,0x01,0x06,0x01,PS,TS,0x01,0x02,0xff))
      elseif func == "pan.left.tilt.up"   then  VISCA("Cmd", string.char(0x81,0x01,0x06,0x01,PS,TS,0x01,0x01,0xff))
  
      elseif func == "zoom.in"   then  VISCA("Cmd", string.char(0x81,0x01,0x04,0x07,(0x20 + ZoomSpeed),0xff))
      elseif func == "zoom.out"  then  VISCA("Cmd", string.char(0x81,0x01,0x04,0x07,(0x30 + ZoomSpeed),0xff))
  
      elseif func == "pan.tilt.stop"  then  VISCA("Cmd", string.char(0x81,0x01,0x06,0x01,0x00,0x00,0x03,0x03,0xff))
      elseif func == "zoom.stop"   then  VISCA("Cmd", string.char(0x81,0x01,0x04,0x07,0x00,0xff))
      end
  
    end
  
  
  
    --Hold Timer ---------------------------------------------
    PresetSaveTimer = Timer.New()
    function PresetSaveTimerHandler()
      PresetSaveTimer:Stop()
      Controls["PresetSaved"].Boolean = false
    end
    PresetSaveTimer.EventHandler = PresetSaveTimerHandler
  
    function Preset(func, pst)
      print("Preset ".. pst .. " " .. func)
  
      if func == "Recall" then
        VISCA("Cmd", string.char(0x81,0x01,0x04,0x3F,0x02,pst,0xff))
      elseif func == "Save" then
        VISCA("Cmd", string.char(0x81,0x01,0x04,0x3F,0x01,pst,0xff))
        Controls["PresetSaved"].Boolean = true
        PresetSaveTimer:Start(0.5)
      end
    end
  
  
  
    for key, val in pairs(Controls) do
      -- PTZ ------------------------------------------------
      if string.sub(key, -6, -1) == ".speed" then
        val.EventHandler = function()
          PanSpeed = Controls["setup.pan.speed"].Value
          TiltSpeed = Controls["setup.tilt.speed"].Value
          ZoomSpeed = Controls["setup.zoom.speed"].Value
          print("PTZ Speeds "..PanSpeed .. ", " .. TiltSpeed .. ", " .. ZoomSpeed)
        end      
      elseif string.sub(key, 1, 4) == "pan." or 
             string.sub(key, 1, 5) == "tilt." or 
             string.sub(key, 1, 5) == "zoom." or
             key == "preset.home.load" then
        val.EventHandler = function(ctl)
          if ctl.Boolean == true then
            PTZ_Control(key)
  
          elseif key == "zoom.in" or 
                 key == "zoom.out" then
            PTZ_Control("zoom.stop")
  
          elseif key ~= "preset.home.load" then
            PTZ_Control("pan.tilt.stop")
          end
        end
      end
    end
  
    -- Presets ----------------------------------------------
    if NumPresets > 0 then
      for pst = 0, NumPresets - 1 do
        local recallCtl = "preset.recall." .. string.format("%03d", pst)
        local saveCtl = "preset.save." .. string.format("%03d", pst)
  
        Controls[recallCtl].EventHandler = function()
          if Properties["Preset Hold Save"].Value == false then
            if Controls[recallCtl].Boolean == true then
              Preset("Recall", pst)
            end
          else
            if Controls[recallCtl].Boolean == true then
              PresetHoldTimer:Start(PresetHoldTime)
              PresetHold = pst
            else
              PresetHoldTimer:Stop()
              if PresetHold ~= nil then
                Preset("Recall", PresetHold)
              end
              PresetHold = nil
            end
          end
        end
  
  
        Controls[saveCtl].EventHandler = function()
          if Controls[saveCtl].Boolean == true then
            Preset("Save", pst)
          end
        end
      end
    end
  
    --Hold Timer ---------------------------------------------
    PresetHoldTimer = Timer.New()
    function PresetHoldTimerHandler()
      PresetHoldTimer:Stop()
      if PresetHold ~= nil then
        Preset("Save", PresetHold)
      end
    end
    PresetHoldTimer.EventHandler = PresetHoldTimerHandler
  
    --Comms polling and timeout ------------------------------
    CommsPollTimer = Timer.New()
    function CommsPoll()
      VISCA("Inq", string.char(0x81,0x09,0x00,0x02,0xFF))
      --print('Polling')
    end
    CommsPollTimer.EventHandler = CommsPoll
  
    CommsTimeoutTimer = Timer.New()
    function CommsTimeout()
      CommsTimeoutTimer:Stop()
      Controls["system.online"].Boolean = false
    end
    CommsTimeoutTimer.EventHandler = CommsTimeout
  
  
    --Initialise --------------------------------------------
    UDP_Initialize()
end
