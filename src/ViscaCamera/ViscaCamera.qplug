-- Information block for the plugin
PluginInfo = {
  Name = "Cameras~VISCA",
  Description = "VISCA Camera with IP/RS232 Control",
  Version = "2.2.0.0",
  BuildVersion = "2.2.0.0",
  Id = "7c307beb-8afc-4029-9f5d-674baa4bd89d",
  Author = "Extrasolve, Isaac Porter",
} 

--[[
###############################################################################
#
# Copyright 2021 Richard Hills t/a Extrasolve             info@extrasolve.co.uk
#
# Based on plugin framework Copyright 2021 QSC, LLC.
#
#==============================================================================
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# 
###############################################################################
]]

-- Resources
--Colour palette
Palette = {
	es_green  = {162, 192, 55},
	es_blue   = {46, 63, 87},
	White     = {255, 255, 255},
	Black     = {0, 0, 0},
	Red       = {255, 0, 0},
	Green     = {0, 255, 0}
}

-- Logos
ES_logo_full = "iVBORw0KGgoAAAANSUhEUgAAAGYAAAAjCAYAAABmSn+9AAAFY2lUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4KPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS41LjAiPgogPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIgogICAgeG1sbnM6ZXhpZj0iaHR0cDovL25zLmFkb2JlLmNvbS9leGlmLzEuMC8iCiAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyIKICAgIHhtbG5zOnBob3Rvc2hvcD0iaHR0cDovL25zLmFkb2JlLmNvbS9waG90b3Nob3AvMS4wLyIKICAgIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIKICAgIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIgogICAgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIKICAgZXhpZjpQaXhlbFhEaW1lbnNpb249IjEwMiIKICAgZXhpZjpQaXhlbFlEaW1lbnNpb249IjM1IgogICBleGlmOkNvbG9yU3BhY2U9IjEiCiAgIHRpZmY6SW1hZ2VXaWR0aD0iMTAyIgogICB0aWZmOkltYWdlTGVuZ3RoPSIzNSIKICAgdGlmZjpSZXNvbHV0aW9uVW5pdD0iMiIKICAgdGlmZjpYUmVzb2x1dGlvbj0iNzIuMCIKICAgdGlmZjpZUmVzb2x1dGlvbj0iNzIuMCIKICAgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMyIKICAgcGhvdG9zaG9wOklDQ1Byb2Zp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"

Icon_Arrow_UpRt = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjwhRE9DVFlQRSBzdmcgUFVCTElDICItLy9XM0MvL0RURCBTVkcgMS4xLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL0dyYXBoaWNzL1NWRy8xLjEvRFREL3N2ZzExLmR0ZCI+Cjxzdmcgd2lkdGg9IjEwMCUiIGhlaWdodD0iMTAwJSIgdmlld0JveD0iMCAwIDI1NiAyNTYiIHZlcnNpb249IjEuMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeG1sOnNwYWNlPSJwcmVzZXJ2ZSIgeG1sbnM6c2VyaWY9Imh0dHA6Ly93d3cuc2VyaWYuY29tLyIgc3R5bGU9ImZpbGwtcnVsZTpldmVub2RkO2NsaXAtcnVsZTpldmVub2RkO3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDoyOyI+CiAgICA8ZyB0cmFuc2Zvcm09Im1hdHJpeCgwLjE2MTU3MSwwLjE2MTMzOCwtMC4xNjEzMzgsMC4xNjE1NzEsMTQ1LjU1OSwtMy4zMTY3NSkiPgogICAgICAgIDxwYXRoIGQ9Ik0zNDAuNCwzMy42QzMzOC4yLDM0LjQgMzM0LjUsMzYuOSAzMzIuMywzOS4zQzMyOC40LDQzLjMgMzYuMiw0NTMuNSAzMy40LDQ1OC45QzMyLjYsNDYwLjMgMzIsNDY0LjQgMzIsNDY3LjlDMzIsNDc4LjkgMzguNiw0ODkuNiA0OCw0OTMuOUM1MS4xLDQ5NS4zIDYwLjQsNDk1LjYgMTI0LDQ5NkwxOTYuNSw0OTYuNUwxOTcuMSw1NTQuNUMxOTcuNCw1ODYuNCAxOTcuOCw2NzAuNSAxOTcuOSw3NDEuNUMxOTgsODMyLjMgMTk4LjMsODcxLjcgMTk5LjEsODc0LjVDMjAwLjYsODgwIDIwOC4yLDg4Ny40IDIxNCw4ODkuMUMyMTcuNyw4OTAuMyAyNDIuOCw4OTAuNSAzNTMuNSw4OTAuNUw0ODguNSw4OTAuNUw0OTMuMSw4ODguNEM0OTcuOCw4ODYuMiA1MDEuOCw4ODEuOSA1MDQuMiw4NzYuNUM1MDUuMyw4NzQuMSA1MDUuNiw4MzggNTA2LDY4NUw1MDYuNSw0OTYuNUw2NTIuNSw0OTUuNUw2NTYuNyw0OTMuM0M2NjguNSw0ODYuOSA2NzUuMyw0NjkuNiA2NzAuMiw0NTguOUM2NjcsNDUyLjIgMzc1LjksNDMuNiAzNzEsMzguOUMzNjcuNywzNS44IDM2NC43LDMzLjkgMzYxLjYsMzMuMUMzNTUuNiwzMS42IDM0NS40LDMxLjggMzQwLjQsMzMuNloiIHN0eWxlPSJmaWxsOndoaXRlOyIvPgogICAgPC9nPgo8L3N2Zz4K"

Icon_Arrow_DnRt = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjwhRE9DVFlQRSBzdmcgUFVCTElDICItLy9XM0MvL0RURCBTVkcgMS4xLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL0dyYXBoaWNzL1NWRy8xLjEvRFREL3N2ZzExLmR0ZCI+Cjxzdmcgd2lkdGg9IjEwMCUiIGhlaWdodD0iMTAwJSIgdmlld0JveD0iMCAwIDI1NiAyNTYiIHZlcnNpb249IjEuMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeG1sOnNwYWNlPSJwcmVzZXJ2ZSIgeG1sbnM6c2VyaWY9Imh0dHA6Ly93d3cuc2VyaWYuY29tLyIgc3R5bGU9ImZpbGwtcnVsZTpldmVub2RkO2NsaXAtcnVsZTpldmVub2RkO3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDoyOyI+CiAgICA8ZyB0cmFuc2Zvcm09Im1hdHJpeCgtMC4xNjEzMzgsMC4xNjE1NzEsLTAuMTYxNTcxLC0wLjE2MTMzOCwyNTkuMzYyLDE2Ni4yMDYpIj4KICAgICAgICA8cGF0aCBkPSJNMzQwLjQsMzMuNkMzMzguMiwzNC40IDMzNC41LDM2LjkgMzMyLjMsMzkuM0MzMjguNCw0My4zIDM2LjIsNDUzLjUgMzMuNCw0NTguOUMzMi42LDQ2MC4zIDMyLDQ2NC40IDMyLDQ2Ny45QzMyLDQ3OC45IDM4LjYsNDg5LjYgNDgsNDkzLjlDNTEuMSw0OTUuMyA2MC40LDQ5NS42IDEyNCw0OTZMMTk2LjUsNDk2LjVMMTk3LjEsNTU0LjVDMTk3LjQsNTg2LjQgMTk3LjgsNjcwLjUgMTk3LjksNzQxLjVDMTk4LDgzMi4zIDE5OC4zLDg3MS43IDE5OS4xLDg3NC41QzIwMC42LDg4MCAyMDguMiw4ODcuNCAyMTQsODg5LjFDMjE3LjcsODkwLjMgMjQyLjgsODkwLjUgMzUzLjUsODkwLjVMNDg4LjUsODkwLjVMNDkzLjEsODg4LjRDNDk3LjgsODg2LjIgNTAxLjgsODgxLjkgNTA0LjIsODc2LjVDNTA1LjMsODc0LjEgNTA1LjYsODM4IDUwNiw2ODVMNTA2LjUsNDk2LjVMNjUyLjUsNDk1LjVMNjU2LjcsNDkzLjNDNjY4LjUsNDg2LjkgNjc1LjMsNDY5LjYgNjcwLjIsNDU4LjlDNjY3LDQ1Mi4yIDM3NS45LDQzLjYgMzcxLDM4LjlDMzY3LjcsMzUuOCAzNjQuNywzMy45IDM2MS42LDMzLjFDMzU1LjYsMzEuNiAzNDUuNCwzMS44IDM0MC40LDMzLjZaIiBzdHlsZT0iZmlsbDp3aGl0ZTsiLz4KICAgIDwvZz4KPC9zdmc+Cg=="

Icon_Arrow_DnLt = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjwhRE9DVFlQRSBzdmcgUFVCTElDICItLy9XM0MvL0RURCBTVkcgMS4xLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL0dyYXBoaWNzL1NWRy8xLjEvRFREL3N2ZzExLmR0ZCI+Cjxzdmcgd2lkdGg9IjEwMCUiIGhlaWdodD0iMTAwJSIgdmlld0JveD0iMCAwIDI1NiAyNTYiIHZlcnNpb249IjEuMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeG1sOnNwYWNlPSJwcmVzZXJ2ZSIgeG1sbnM6c2VyaWY9Imh0dHA6Ly93d3cuc2VyaWYuY29tLyIgc3R5bGU9ImZpbGwtcnVsZTpldmVub2RkO2NsaXAtcnVsZTpldmVub2RkO3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDoyOyI+CiAgICA8ZyB0cmFuc2Zvcm09Im1hdHJpeCgtMC4xNjE1NzEsLTAuMTYxMzM4LDAuMTYxMzM4LC0wLjE2MTU3MSw4OS44MzkzLDI4MC4wMDgpIj4KICAgICAgICA8cGF0aCBkPSJNMzQwLjQsMzMuNkMzMzguMiwzNC40IDMzNC41LDM2LjkgMzMyLjMsMzkuM0MzMjguNCw0My4zIDM2LjIsNDUzLjUgMzMuNCw0NTguOUMzMi42LDQ2MC4zIDMyLDQ2NC40IDMyLDQ2Ny45QzMyLDQ3OC45IDM4LjYsNDg5LjYgNDgsNDkzLjlDNTEuMSw0OTUuMyA2MC40LDQ5NS42IDEyNCw0OTZMMTk2LjUsNDk2LjVMMTk3LjEsNTU0LjVDMTk3LjQsNTg2LjQgMTk3LjgsNjcwLjUgMTk3LjksNzQxLjVDMTk4LDgzMi4zIDE5OC4zLDg3MS43IDE5OS4xLDg3NC41QzIwMC42LDg4MCAyMDguMiw4ODcuNCAyMTQsODg5LjFDMjE3LjcsODkwLjMgMjQyLjgsODkwLjUgMzUzLjUsODkwLjVMNDg4LjUsODkwLjVMNDkzLjEsODg4LjRDNDk3LjgsODg2LjIgNTAxLjgsODgxLjkgNTA0LjIsODc2LjVDNTA1LjMsODc0LjEgNTA1LjYsODM4IDUwNiw2ODVMNTA2LjUsNDk2LjVMNjUyLjUsNDk1LjVMNjU2LjcsNDkzLjNDNjY4LjUsNDg2LjkgNjc1LjMsNDY5LjYgNjcwLjIsNDU4LjlDNjY3LDQ1Mi4yIDM3NS45LDQzLjYgMzcxLDM4LjlDMzY3LjcsMzUuOCAzNjQuNywzMy45IDM2MS42LDMzLjFDMzU1LjYsMzEuNiAzNDUuNCwzMS44IDM0MC40LDMzLjZaIiBzdHlsZT0iZmlsbDp3aGl0ZTsiLz4KICAgIDwvZz4KPC9zdmc+Cg=="

Icon_Arrow_UpLt = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjwhRE9DVFlQRSBzdmcgUFVCTElDICItLy9XM0MvL0RURCBTVkcgMS4xLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL0dyYXBoaWNzL1NWRy8xLjEvRFREL3N2ZzExLmR0ZCI+Cjxzdmcgd2lkdGg9IjEwMCUiIGhlaWdodD0iMTAwJSIgdmlld0JveD0iMCAwIDI1NiAyNTYiIHZlcnNpb249IjEuMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeG1sOnNwYWNlPSJwcmVzZXJ2ZSIgeG1sbnM6c2VyaWY9Imh0dHA6Ly93d3cuc2VyaWYuY29tLyIgc3R5bGU9ImZpbGwtcnVsZTpldmVub2RkO2NsaXAtcnVsZTpldmVub2RkO3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDoyOyI+CiAgICA8ZyB0cmFuc2Zvcm09Im1hdHJpeCgwLjE2MTMzOCwtMC4xNjE1NzEsMC4xNjE1NzEsMC4xNjEzMzgsLTIzLjk2MzIsMTEwLjQ4NikiPgogICAgICAgIDxwYXRoIGQ9Ik0zNDAuNCwzMy42QzMzOC4yLDM0LjQgMzM0LjUsMzYuOSAzMzIuMywzOS4zQzMyOC40LDQzLjMgMzYuMiw0NTMuNSAzMy40LDQ1OC45QzMyLjYsNDYwLjMgMzIsNDY0LjQgMzIsNDY3LjlDMzIsNDc4LjkgMzguNiw0ODkuNiA0OCw0OTMuOUM1MS4xLDQ5NS4zIDYwLjQsNDk1LjYgMTI0LDQ5NkwxOTYuNSw0OTYuNUwxOTcuMSw1NTQuNUMxOTcuNCw1ODYuNCAxOTcuOCw2NzAuNSAxOTcuOSw3NDEuNUMxOTgsODMyLjMgMTk4LjMsODcxLjcgMTk5LjEsODc0LjVDMjAwLjYsODgwIDIwOC4yLDg4Ny40IDIxNCw4ODkuMUMyMTcuNyw4OTAuMyAyNDIuOCw4OTAuNSAzNTMuNSw4OTAuNUw0ODguNSw4OTAuNUw0OTMuMSw4ODguNEM0OTcuOCw4ODYuMiA1MDEuOCw4ODEuOSA1MDQuMiw4NzYuNUM1MDUuMyw4NzQuMSA1MDUuNiw4MzggNTA2LDY4NUw1MDYuNSw0OTYuNUw2NTIuNSw0OTUuNUw2NTYuNyw0OTMuM0M2NjguNSw0ODYuOSA2NzUuMyw0NjkuNiA2NzAuMiw0NTguOUM2NjcsNDUyLjIgMzc1LjksNDMuNiAzNzEsMzguOUMzNjcuNywzNS44IDM2NC43LDMzLjkgMzYxLjYsMzMuMUMzNTUuNiwzMS42IDM0NS40LDMxLjggMzQwLjQsMzMuNloiIHN0eWxlPSJmaWxsOndoaXRlOyIvPgogICAgPC9nPgo8L3N2Zz4K"

-- Define the color of the plugin object in the design
function GetColor(props)
  return Palette.es_blue
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return "VISCA Camera v" .. PluginInfo.Version --string.match(PluginInfo.BuildVersion, "([0-9]+.[0-9]+)") 
end

-- Optional function used if plugin has multiple pages
PageNames = { "Main" }  --List the pages within the plugin  { "Page1", "Page2" }
function GetPages(props)
  local pages = {}
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Optional function to define model if plugin supports more than one model
function GetModel(props)
  local model = {}
 return model
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  table.insert(props, {
    Name = "Connection",
    Type = "enum",
    Choices = {"RS232", "IP"},
    Value = "RS232"
  })
  table.insert(props, {
    Name = "Command Set",
    Type = "enum",
    Choices = {"VISCA", "VISCA over IP"},
    Value = "VISCA"
  })
  table.insert(props, {
    Name = "Num Presets",
    Type = "integer",
    Value = 8,
    Min = 0,
    Max = 128
  })
  table.insert(props, {
    Name = "Preset Hold Save",
    Type = "boolean",
    Value = false
  })
  table.insert(props, {
    Name = "Preset Hold Time",
    Type = "double",
    Value = 2,
    Min = 0.5,
    Max = 5.0
  })
  table.insert(props, {
    Name = "Debug Print",
    Type = "enum",
    Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
    Value = "None"
  })
  
  
  return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
  local pins = {}
  if props["Connection"].Value == "RS232" then
    table.insert(pins,{Name="Serial Port", Direction="input", Domain="serial"})
  end
  return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then 
    props["Debug Print"].IsHidden = true 
  end
  
  if props["Preset Hold Save"].Value == false then 
    props["Preset Hold Time"].IsHidden = true 
  end
  return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
  local components = {}
  -- Optional function to define components used within the plugin
  function GetComponents(props)
    local components = {}
    return components
  end
  return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
  local wiring = {}
  --table.insert( wiring, { "Audio Output", "main_mixer Output 1" } )
  return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  local ctrls = {}
    local NumPresets =  props["Num Presets"].Value
    
    -- Connection ---------------------------------------------------------------
    table.insert(ctrls, {
      Name = "system_online",
      ControlType = "Indicator",
      IndicatorType = "Led",
      DefaultValue = false,
      PinStyle = "Output",
      Count = 1,
      UserPin = true
    })
    
    table.insert(ctrls, {
      Name = "system_ip_address",
      ControlType = "Text",
      DefaultValue = "127.0.0.1",
      UserPin = true,
      PinStyle = "Both",
      Count = 1
    })
    table.insert(ctrls, {
      Name = "system_ip_port",
      ControlType = "Knob",
      ControlUnit = "Integer",
      Min = 1,
      Max = 65535,
      DefaultValue = 52381,
      UserPin = true,
      PinStyle = "Both",
      Count = 1
    })
    
    -- PTZ ----------------------------------------------------------------------
    table.insert(ctrls, {
      Name = "setup_camera_id",
      ControlType = "Knob",
      ControlUnit = "Integer",
      Min = 1,
      Max = 7,
      DefaultValue = 1,
      UserPin = true,
      PinStyle = "Both",
      Count = 1
    })
    table.insert(ctrls, {
      Name = "setup_pan_speed",
      ControlType = "Knob",
      ControlUnit = "Integer",
      Min = 1,
      Max = 24,
      DefaultValue = 12,
      UserPin = true,
      PinStyle = "Both",
      Count = 1
    })
    table.insert(ctrls, {
      Name = "setup_tilt_speed",
      ControlType = "Knob",
      ControlUnit = "Integer",
      Min = 1,
      Max = 20,
      DefaultValue = 10,
      UserPin = true,
      PinStyle = "Both",
      Count = 1
    })
    table.insert(ctrls, {
      Name = "setup_zoom_speed",
      ControlType = "Knob",
      ControlUnit = "Integer",
      Min = 0,
      Max = 7,
      DefaultValue = 3,
      UserPin = true,
      PinStyle = "Both",
      Count = 1
    })
    
    table.insert(ctrls, {
      Name = "preset_home_load",
      ControlType = "Button",
      ButtonType = "Momentary",
      Count = 1,
      UserPin = true,
      PinStyle = "Input",
      Icon = "Home"
    })
    
    table.insert(ctrls, {
      Name = "tilt_up",
      ControlType = "Button",
      ButtonType = "Momentary",
      Count = 1,
      UserPin = true,
      PinStyle = "Input",
      Icon = "Arrow Up"
    })
    
    table.insert(ctrls, {
      Name = "tilt_down",
      ControlType = "Button",
      ButtonType = "Momentary",
      Count = 1,
      UserPin = true,
      PinStyle = "Input",
      Icon = "Arrow Down"
    })
    
    table.insert(ctrls, {
      Name = "pan_left",
      ControlType = "Button",
      ButtonType = "Momentary",
      Count = 1,
      UserPin = true,
      PinStyle = "Input",
      Icon = "Arrow Left"
    })
    
    table.insert(ctrls, {
      Name = "pan_right",
      ControlType = "Button",
      ButtonType = "Momentary",
      Count = 1,
      UserPin = true,
      PinStyle = "Input",
      Icon = "Arrow Right"
    })
    
    table.insert(ctrls, {
      Name = "pan_right_tilt_up",
      ControlType = "Button",
      ButtonType = "Momentary",
      Count = 1,
      UserPin = true,
      PinStyle = "Input",
      IconType = "SVG",
      Icon = Icon_Arrow_UpRt
    })
    
    table.insert(ctrls, {
      Name = "pan_right_tilt_down",
      ControlType = "Button",
      ButtonType = "Momentary",
      Count = 1,
      UserPin = true,
      PinStyle = "Input",
      IconType = "SVG",
      Icon = Icon_Arrow_DnRt
    })
    
    table.insert(ctrls, {
      Name = "pan_left_tilt_down",
      ControlType = "Button",
      ButtonType = "Momentary",
      Count = 1,
      UserPin = true,
      PinStyle = "Input",
      IconType = "SVG",
      Icon = Icon_Arrow_DnLt
    })
    
    table.insert(ctrls, {
      Name = "pan_left_tilt_up",
      ControlType = "Button",
      ButtonType = "Momentary",
      Count = 1,
      UserPin = true,
      PinStyle = "Input",
      IconType = "SVG",
      Icon = Icon_Arrow_UpLt
    })
    
    table.insert(ctrls, {
      Name = "zoom_in",
      ControlType = "Button",
      ButtonType = "Momentary",
      Count = 1,
      UserPin = true,
      PinStyle = "Input",
      Icon = "Zoom In"
    })
    
    table.insert(ctrls, {
      Name = "zoom_out",
      ControlType = "Button",
      ButtonType = "Momentary",
      Count = 1,
      UserPin = true,
      PinStyle = "Input",
      Icon = "Zoom Out"
    })
  
    table.insert(ctrls, {
      Name = "tracking_on",
      ControlType = "Button",
      ButtonType = "Momentary",
      Count = 1,
      UserPin = true,
      PinStyle = "Input"
    })
    
    table.insert(ctrls, {
      Name = "tracking_off",
      ControlType = "Button",
      ButtonType = "Momentary",
      Count = 1,
      UserPin = true,
      PinStyle = "Input"
    })
    
    -- Presets ------------------------------------------------------------------
    table.insert(ctrls, {
      Name = "preset_saved",
      ControlType = "Indicator",
      IndicatorType = "Led",
      DefaultValue = false,
      PinStyle = "Output",
      Count = 1,
      UserPin = true
    })
    
    for pst = 0, NumPresets - 1 do
      table.insert(ctrls, {
        Name = "preset_recall_" .. string.format("%03d",pst),
        ControlType = "Button",
        ButtonType = "Momentary",
        Count = 1,
        UserPin = true,
        PinStyle = "Input",
        Icon = ""
      })
      table.insert(ctrls, {
        Name = "preset_save_" .. string.format("%03d",pst),
        ControlType = "Button",
        ButtonType = "Momentary",
        Count = 1,
        UserPin = true,
        PinStyle = "Input",
        Icon = ""
      })
    end
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  local CurrentPage = PageNames[props["page_index"].Value]
    
  local h1 = 20                 --Height of text elements
  local h2 = 32                 --Height of control buttons
  local w1 = 280                --Width of group boxes
  local fs1 = 12                --FontSize of text elements
  
  --Calculate preset gropup box size and save button offset
  local NumPresets = props["Num Presets"].Value
  local NumPresetRows = math.floor((NumPresets - 1) / 8) + 1
  
  local PresetGroupHeight = 24 + (NumPresetRows * h2)
  if props["Preset Hold Save"].Value == false then
    PresetGroupHeight = PresetGroupHeight + (NumPresetRows * h2) + 8
  end
  
  local PresetSaveOffset = (h2 * NumPresetRows) + 8
  
  
  
  if CurrentPage == "Main" then
  
    -- Logo -------------------------------------------------------------------
    table.insert(graphics,{
      Type = "Text",
      Text = "Build Info",
      FontSize = fs1,
      HTextAlign = "Left",
      Position = {0, 0},
      Size = {62, h1}
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "v" .. PluginInfo.BuildVersion,
      FontSize = fs1,
      HTextAlign = "Left",
      Position = {0, h1},
      Size = {62, h1}
    })
    
    -- Group boxes ------------------------------------------------------------
    table.insert(graphics,{
      Type = "GroupBox",
      Text = "Connection",
      FontSize = fs1,
      HTextAlign = "Left",
      Fill = Palette.White,
      StrokeColor = Palette.Black,
      StrokeWidth = 1,
      CornerRadius = 8,
      Position = {0, 40},
      Size = {w1, 62}
    })
    table.insert(graphics,{
      Type = "GroupBox",
      Text = "PTZ",
      FontSize = fs1,
      HTextAlign = "Left",
      Fill = Palette.White,
      StrokeColor = Palette.Black,
      StrokeWidth = 1,
      CornerRadius = 8,
      Position = {0, 114},
      Size = {w1, 104}
    })
  
    if NumPresets > 0 then
      table.insert(graphics,{
        Type = "GroupBox",
        Text = "Presets",
        FontSize = fs1,
        HTextAlign = "Left",
        Fill = Palette.White,
        StrokeColor = Palette.Black,
        StrokeWidth = 1,
        CornerRadius = 8,
        Position = {0, 226},
        Size = {w1, PresetGroupHeight}
      })
    end
  
    -- Connection -------------------------------------------------------------
    layout["system_online"] = {
      PrettyName = "System~Online",
      Style = "Indicator",
      Color = {0, 255, 0},
      OffColor = {64, 0, 0},
      UnlinkOffColor = true,
      StrokeWidth = 1,
      Margin = 4,
      Position = {75, 40},
      Size = {h1, h1}
    }
    if props["Connection"].Value == "IP" then
      table.insert(graphics,{
        Type = "Text",
        Text = "IP Address",
        FontSize = fs1,
        HTextAlign = "Right",
        Position = {15, 74},
        Size = {62, h1}
      })
      layout["system_ip_address"] = {
        PrettyName = "System~IP Address",
        Style = "Text",
        FontSize = fs1,
        HTextAlign = "Center",
        Padding = 2,
        StrokeWidth = 1,
        Position = {79,74},
        Size = {100, h1}
      }
      
      table.insert(graphics,{
        Type = "Text",
        Text = "Port",
        FontSize = fs1,
        HTextAlign = "Right",
        Position = {184, 74},
        Size = {33, h1}
      })
      layout["system_ip_port"] = {
        PrettyName = "System~IP Port",
        Style = "Text",
        Color = Palette.White,
        OffColor = Palette.White,
        UnlinkOffColor = true,
        FontSize = fs1,
        HTextAlign = "Center",
        Padding = 2,
        StrokeWidth = 1,
        Position = {219, 74},
        Size = {44, h1}
      }
      table.insert(graphics,{
        Type = "Text",
        Text = "ID",
        FontSize = fs1,
        HTextAlign = "Right",
        Position = {184, 54},
        Size = {33, h1}
      })
      layout["setup_camera_id"] = {
        PrettyName = "Camera-ID",
        Style = "Text",
        Color = Palette.White,
        OffColor = Palette.White,
        UnlinkOffColor = true,
        FontSize = fs1,
        HTextAlign = "Center",
        Padding = 2,
        StrokeWidth = 1,
        Position = {219, 54},
        Size = {44, h1}
      }
    end
    -- PTZ --------------------------------------------------------------------
    table.insert(graphics,{
      Type = "Text",
      Text = "Speed",
      FontSize = fs1,
      HTextAlign = "Center",
      Position = {34, 137},
      Size = {47, 20}
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "P\nT\nZ",
      FontSize = 15,
      HTextAlign = "Center",
      Position = {17, 153},
      Size = {17, 54}
    })
    layout["setup_pan_speed"] = {
      PrettyName = "Pan-Tilt-Zoom~Pan Speed",
      Style = "Text",
      FontSize = fs1,
      HTextAlign = "Center",
      Padding = 2,
      StrokeWidth = 1,
      Position = {37, 155},
      Size = {44, 18}
    }
    layout["setup_tilt_speed"] = {
      PrettyName = "Pan-Tilt-Zoom~Tilt Speed",
      Style = "Text",
      FontSize = fs1,
      HTextAlign = "Center",
      Padding = 2,
      StrokeWidth = 1,
      Position = {37, 173},
      Size = {44, 18}
    }
    layout["setup_zoom_speed"] = {
      PrettyName = "Pan-Tilt-Zoom~Zoom Speed",
      Style = "Text",
      FontSize = fs1,
      HTextAlign = "Center",
      Padding = 2,
      StrokeWidth = 1,
      Position = {37, 191},
      Size = {44, 18}
    }
  
    layout["preset_home_load"] = {
      PrettyName = "Pan-Tilt-Zoom~Home",
      Legend = "",
      Style = "Button",
      Color = Palette.es_blue,
      Margin = 4,
      Position = {139, 150},
      Size = {h2, h2},
    }    
    layout["tilt_up"] = {
      PrettyName = "Pan-Tilt-Zoom~Tilt Up",
      Legend = "",
      Style = "Button",
      Color = Palette.es_blue,
      Margin = 4,
      Position = {139, 118},
      Size = {h2, h2},
    }    
    layout["tilt_down"] = {
      PrettyName = "Pan-Tilt-Zoom~Tilt Down",
      Legend = "",
      Style = "Button",
      Color = Palette.es_blue,
      Margin = 4,
      Position = {139, 182},
      Size = {h2, h2},
    }    
    layout["pan_left"] = {
      PrettyName = "Pan-Tilt-Zoom~Pan Left",
      Legend = "",
      Style = "Button",
      Color = Palette.es_blue,
      Margin = 4,
      Position = {107, 150},
      Size = {h2, h2},
    }    
    layout["pan_right"] = {
      PrettyName = "Pan-Tilt-Zoom~Pan Right",
      Legend = "",
      Style = "Button",
      Color = Palette.es_blue,
      Margin = 4,
      Position = {171, 150},
      Size = {h2, h2},
    }    
    layout["pan_right_tilt_up"] = {
      PrettyName = "Pan-Tilt-Zoom~Pan Right / Tilt Up",
      Legend = "",
      Style = "Button",
      Color = Palette.es_blue,
      Margin = 4,
      Position = {171, 118},
      Size = {h2, h2},
    }    
    layout["pan_right_tilt_down"] = {
      PrettyName = "Pan-Tilt-Zoom~Pan Right / Tilt Down",
      Legend = "",
      Style = "Button",
      Color = Palette.es_blue,
      Margin = 4,
      Position = {171, 182},
      Size = {h2, h2},
    }    
    layout["pan_left_tilt_down"] = {
      PrettyName = "Pan-Tilt-Zoom~Pan Left / Tilt Down",
      Legend = "",
      Style = "Button",
      Color = Palette.es_blue,
      Margin = 4,
      Position = {107, 182},
      Size = {h2, h2},
    }    
    layout["pan_left_tilt_up"] = {
      PrettyName = "Pan-Tilt-Zoom~Pan Left / Tilt Up",
      Legend = "",
      Style = "Button",
      Color = Palette.es_blue,
      Margin = 4,
      Position = {107, 118},
      Size = {h2, h2},
    }
    layout["zoom_in"] = {
      PrettyName = "Pan-Tilt-Zoom~Zoom In",
      Legend = "",
      Style = "Button",
      Color = Palette.es_blue,
      Margin = 4,
      Position = {203, 133},
      Size = {h2, h2},
    }    
    layout["zoom_out"] = {
      PrettyName = "Pan-Tilt-Zoom~Zoom Out",
      Legend = "",
      Style = "Button",
      Color = Palette.es_blue,
      Margin = 4,
      Position = {203, 165},
      Size = {h2, h2},
    }   
    layout["tracking_on"] = {
      PrettyName = "Tracking~On",
      Legend = "Track\nOn",
      Style = "Button",
      Color = Palette.es_blue,
      Margin = 4,
      Position = {235, 133},
      Size = {h2, h2},
    }    
    layout["tracking_off"] = {
      PrettyName = "Tracking~Off",
      Legend = "Track\nOff",
      Style = "Button",
      Color = Palette.es_blue,
      Margin = 4,
      Position = {235, 165},
      Size = {h2, h2},
    }    
  
    -- Presets ----------------------------------------------------------------
    
    layout["preset_saved"] = {
    PrettyName = "Preset~Preset Saved",
    Style = "Indicator",
    Color = {255, 0, 0},
    OffColor = {16, 0, 0},
    UnlinkOffColor = true,
    StrokeWidth = 1,
    Margin = 4,
    Position = {55, 225},
    Size = {h1, h1}
    }
  
    for pst = 0, NumPresets - 1 do
      local row = 1 + math.floor(pst / 8)
      local col = 1 + (pst % 8)
  
      layout["preset_recall_" .. string.format("%03d",pst)] = {
        PrettyName = "Preset~Recall P" .. string.format("%03d", pst),
        Style = "Button",
        Margin = 4,
        Color = Palette.Green,
        Legend = "P" .. (pst),
        Position = {11 + (h2 * (col - 1)),
                    246 + (h2 * (row - 1))},
        Size = {h2, h2}
      }
  
      if props["Preset Hold Save"].Value == false then
        layout["preset_save_" .. string.format("%03d",pst)] = {
          PrettyName = "Preset~Save P" .. string.format("%03d", pst),
          Style = "Button",
          Margin = 4,
          Color = Palette.Red,
          Legend = "P" .. (pst),
          Position = {11 + (h2 * (col - 1)),
                      246 + PresetSaveOffset + (h2 * (row - 1))},
          Size = {h2, h2}
        }
      end
    end
  
  end
  return layout, graphics
end

--Start event based logic
if Controls then
   --vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv UDP vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    
  -- Sockets
  if Properties["Connection"].Value == "IP" then
    Connection = UdpSocket.New()  -- Create new UdpSocket object
  elseif Properties["Connection"].Value == "RS232" then
    Connection = SerialPorts[1]
  end
  ConnectionOpen = false
  
  IPAddressCtl = Controls["system_ip_address"]
  IPPortCtl = Controls["system_ip_port"]
  
  -- Map the UDP example properties to plugin properies
  IPAddress = IPAddressCtl.String
  Port = IPPortCtl.Value
  LocalIPAddress = nil    --Auto select
  LocalPort = nil         --Auto select
  LocalNICName = nil      --Auto select  
  PollInteval = 10
  
  
  -- If a NIC is specified by name, bind LocalIPAddress to it
  function SelectNIC()
    if DebugFunction then print("SelectNIC() Called") end
    if LocalNICName ~= nil then
      -- Detect the local IP address selected LAN
      local nics = Network.Interfaces()
      for i,nic in ipairs(nics) do
        if nic.Interface == LocalNICName then
          LocalIPAddress = nic.Address
        end
      end
    end
  end
  
  -- When the UDP Socket is created run these setup functions
  function Connected()
    if DebugFunction then print("Connected() Called") end
    print("UDP Socket Opened")
    ConnectionOpen = true
    
    -- Start any initial data requests or polling loops here
    CommsPoll()
  end
  
  -- Wrapper for safely binding local address
  function OpenPorts(ip, port)
    if DebugFunction then print("OpenPorts() Called: " .. ip .. ":" .. port) end
    Connection:Open(ip, port)
  end
  
  -- Opens a local UDP socket for use
  function OpenSocket()
    if DebugFunction then print("OpenSocket() Called") end  
    -- If a local address has been chosen, open a UDP socket for use
    if LocalIPAddress ~= nil then
      print("Opening: " .. LocalIPAddress .. ":" .. LocalPort)
      -- pcall will prevent down interfaces from causing script errors
      local portGood, err = pcall(OpenPorts, LocalIPAddress, LocalPort)
      if not portGood then
        print("Error opening UDP Socket: " .. err)
      else
        Connected()
      end
  
    -- Let the core choose the address and port of the UDP socket automatically
    else
      OpenPorts(nil,nil)
      Connected()
    end
  end
  
  -- Use the open UDPSocket to send a UDP datagram of the string (command) to the IPAddress and Port defined
  function Send(command)
    if DebugFunction then print("Send() Called") end
    if ConnectionOpen then
      if DebugRx then print("Sending " .. command)  end
      if Properties["Connection"].Value == "IP" then
        Connection:Send(IPAddress, Port, command)  -- Write command to the UDP socket
      elseif Properties["Connection"].Value == "RS232" then
        Connection:Write(command)
      end
    else
      --If the socket is closed, open it and try again
      OpenSocket()
      Send(command)
    end
  end
  
  -- Handle cleanup when closing the UDP port
  function Close()
    if DebugFunction then print("Close() Called") end
    Connection:Close()
    ConnectionOpen=false
    Controls["system_online"].Boolean = false
  
    -- Stop any timers and clear data here
    CommsPollTimer:Stop()
  end
  
  -- Parsers
  -- UDP Data event is called when data is received on the port, either targeted at the local address or from a multicast network.
  if Properties["Connection"].Value == "IP" then
    Connection.Data = function(socket, packet)
      if DebugFunction then print("UDP Data Eventhandler Called") end
      if DebugRx then print("Address: " .. packet.Address, "Port: " .. packet.Port, "Rx: " .. packet.Data)  end
      
      -- Handle response data here
      if string.sub(packet.Data, 1, 2) == "\x01\x11" then --Valid visca reply
        Controls["system_online"].Boolean = true
        CommsTimeoutTimer:Start(PollInteval * 2.5)
      end
    end
  elseif Properties["Connection"].Value == "RS232" then
    Connection.Data = function(port)
      if DebugFunction then print("RS232 Data Eventhandler Called") end
      if DebugRx then print("Rx: " .. port:ReadLine(SerialPorts.EOL.Any))  end
      Controls["system_online"].Boolean = true
    end
    Connection.Connected = function()
      ConnectionOpen = true
    end
  end
  
  
  
  --Setup the UDP sockets to be used 
  function Initialize()
    if DebugFunction then print("Initialize() Called") end
    Controls["system_online"].Boolean = false
    
    IPAddress = IPAddressCtl.String
    Port = IPPortCtl.Value
  
    if ConnectionOpen == true then
      Close()
    end
  
    if Properties["Connection"].Value == "IP" then
      if IPAddress.String ~= "" then
        SelectNIC()                       -- Choose the correct NIC for communication
        OpenSocket()                      -- Create the local UDP Socket for use
      end
    elseif Properties["Connection"].Value == "RS232" then
      Connection:Open(9600, 8, "N")
    end
  end
  
  
  IPAddressCtl.EventHandler = Initialize
  IPPortCtl.EventHandler = Initialize
  
  --^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  
  local MsgSeqIndex = 0
  local PresetHold = nil
  local NumPresets = Properties["Num Presets"].Value
  local PresetHoldTime = Properties["Preset Hold Time"].Value
  
  local PanSpeed = Controls["setup_pan_speed"].Value
  local TiltSpeed = Controls["setup_tilt_speed"].Value
  local ZoomSpeed = Controls["setup_zoom_speed"].Value
  
  function HexToString(num, len)
    --Returns num as string of len * hex bytes
    local val = num
    local ret = ""
    for i = 1, len do
      ret = string.char(val & 0xff) .. ret
      val = math.floor(val / 0x100)
    end
    return ret
  end
  
  function VISCA(typ, msg)	
    --print("PTZ_Control(" .. typ .. ", " .. msg .. ")")	
    if ConnectionOpen == true then	
  
      CommsPollTimer:Start(PollInteval)	
  
      --Calculate message type for header	
      local msgType = string.char(0x01,0x00)	
      if string.sub(typ, 1, 3) == "Inq" then	
        msgType = string.char(0x01,0x10)	
      end	
  
      --Calculate message length for header	
      local msgLen = HexToString(#msg, 2)	
  
      --Calculate sequence number header	
      if MsgSeqIndex < 0xFFFFFFFF then	
        MsgSeqIndex = MsgSeqIndex + 1	
      else	
        MsgSeqIndex = 0	
      end	
      local msgSeq = HexToString(MsgSeqIndex, 4)	
  
      --Build and send message
      local viscaMsg = ""
      if Properties["Command Set"].Value == "VISCA" then
        viscaMsg = msg
      elseif Properties["Command Set"].Value == "VISCA over IP" then
        viscaMsg = msgType .. msgLen .. msgSeq .. msg	
      end
      Send(viscaMsg)	
    end	
  end	
  
  
  function PTZ_Control(func)
    print(func)
  
    local PS = PanSpeed
    local TS = TiltSpeed
    local ID = Controls["setup_camera_id"].Value + 128
  
  
    if     func == "preset_home_load"     then  VISCA("Cmd", string.char(ID,0x01,0x06,0x04,0xff))
  
    elseif func == "tilt_up"              then  VISCA("Cmd", string.char(ID,0x01,0x06,0x01,PS,TS,0x03,0x01,0xff))
    elseif func == "tilt_down"            then  VISCA("Cmd", string.char(ID,0x01,0x06,0x01,PS,TS,0x03,0x02,0xff))
    elseif func == "pan_left"             then  VISCA("Cmd", string.char(ID,0x01,0x06,0x01,PS,TS,0x01,0x03,0xff))
    elseif func == "pan_right"            then  VISCA("Cmd", string.char(ID,0x01,0x06,0x01,PS,TS,0x02,0x03,0xff))
  
    elseif func == "pan_right_tilt_up"    then  VISCA("Cmd", string.char(ID,0x01,0x06,0x01,PS,TS,0x02,0x01,0xff))
    elseif func == "pan_right_tilt_down"  then  VISCA("Cmd", string.char(ID,0x01,0x06,0x01,PS,TS,0x02,0x02,0xff))
    elseif func == "pan_left_tilt_down"   then  VISCA("Cmd", string.char(ID,0x01,0x06,0x01,PS,TS,0x01,0x02,0xff))
    elseif func == "pan_left_tilt_up"     then  VISCA("Cmd", string.char(ID,0x01,0x06,0x01,PS,TS,0x01,0x01,0xff))
  
    elseif func == "zoom_in"              then  VISCA("Cmd", string.char(ID,0x01,0x04,0x07,(0x20 + ZoomSpeed),0xff))
    elseif func == "zoom_out"             then  VISCA("Cmd", string.char(ID,0x01,0x04,0x07,(0x30 + ZoomSpeed),0xff))
  
    elseif func == "pan_tilt_stop"        then  VISCA("Cmd", string.char(ID,0x01,0x06,0x01,0x00,0x00,0x03,0x03,0xff))
    elseif func == "zoom_stop"            then  VISCA("Cmd", string.char(ID,0x01,0x04,0x07,0x00,0xff))
  
    elseif func == "tracking_on"          then  VISCA("Cmd", string.char(ID,0x01,0x04,0x35,0x02,0xff))
    elseif func == "tracking_off"         then  VISCA("Cmd", string.char(ID,0x01,0x04,0x35,0x03,0xff))
    end
  end
  
  
  
  --Hold Timer ---------------------------------------------
  PresetSaveTimer = Timer.New()
  function PresetSaveTimerHandler()
    PresetSaveTimer:Stop()
    Controls["preset_saved"].Boolean = false
  end
  PresetSaveTimer.EventHandler = PresetSaveTimerHandler
  
  function Preset(func, pst)
    print("Preset ".. pst .. " " .. func)
    local ID = Controls["setup_camera_id"].Value + 128
  
    if func == "Recall" then
      VISCA("Cmd", string.char(ID,0x01,0x04,0x3F,0x02,pst,0xff))
    elseif func == "Save" then
      VISCA("Cmd", string.char(ID,0x01,0x04,0x3F,0x01,pst,0xff))
      Controls["preset_saved"].Boolean = true
      PresetSaveTimer:Start(0.5)
    end
  end
  
  
  
  for key, val in pairs(Controls) do
    -- PTZ ------------------------------------------------
    if string.sub(key, -6, -1) == "_speed" then
      val.EventHandler = function()
        PanSpeed = Controls["setup_pan_speed"].Value
        TiltSpeed = Controls["setup_tilt_speed"].Value
        ZoomSpeed = Controls["setup_zoom_speed"].Value
        print("PTZ Speeds "..PanSpeed .. ", " .. TiltSpeed .. ", " .. ZoomSpeed)
      end      
    elseif string.sub(key, 1, 4) == "pan_" or
            string.sub(key, 1, 5) == "tilt_" or
            string.sub(key, 1, 5) == "zoom_" or
            string.sub(key, 1, 9) == "tracking_" or
            key == "preset_home_load" then
      val.EventHandler = function(ctl)
        if ctl.Boolean == true then
          PTZ_Control(key)
  
        elseif key == "zoom_in" or 
                key == "zoom_out" then
          PTZ_Control("zoom_stop")
  
        elseif key ~= "preset_home_load" and (string.sub(key, 1, 9) ~= "tracking_") then
          PTZ_Control("pan_tilt_stop")
        end
      end
    end
  end
  
  -- Presets ----------------------------------------------
  if NumPresets > 0 then
    for pst = 0, NumPresets - 1 do
      local recallCtl = "preset_recall_" .. string.format("%03d", pst)
      local saveCtl = "preset_save_" .. string.format("%03d", pst)
  
      Controls[recallCtl].EventHandler = function()
        if Properties["Preset Hold Save"].Value == false then
          if Controls[recallCtl].Boolean == true then
            Preset("Recall", pst)
          end
        else
          if Controls[recallCtl].Boolean == true then
            PresetHoldTimer:Start(PresetHoldTime)
            PresetHold = pst
          else
            PresetHoldTimer:Stop()
            if PresetHold ~= nil then
              Preset("Recall", PresetHold)
            end
            PresetHold = nil
          end
        end
      end
  
  
      Controls[saveCtl].EventHandler = function()
        if Controls[saveCtl].Boolean == true then
          Preset("Save", pst)
        end
      end
    end
  end
  
  --Hold Timer ---------------------------------------------
  PresetHoldTimer = Timer.New()
  function PresetHoldTimerHandler()
    PresetHoldTimer:Stop()
    if PresetHold ~= nil then
      Preset("Save", PresetHold)
    end
  end
  PresetHoldTimer.EventHandler = PresetHoldTimerHandler
  
  --Comms polling and timeout ------------------------------
  CommsPollTimer = Timer.New()
  function CommsPoll()
    VISCA("Inq", string.char(Controls["setup_camera_id"].Value + 128,0x09,0x00,0x02,0xFF))
    --print('Polling')
  end
  CommsPollTimer.EventHandler = CommsPoll
  
  CommsTimeoutTimer = Timer.New()
  function CommsTimeout()
    CommsTimeoutTimer:Stop()
    Controls["system_online"].Boolean = false
  end
  CommsTimeoutTimer.EventHandler = CommsTimeout
  
  
  --Initialise --------------------------------------------
  Initialize()
end
